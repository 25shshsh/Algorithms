2-1 Maze

- 전역변수
2차원 배열 : maze
미로의 크기 : N
이동가능한 셀 : 0
막힌 벽 : 1
실패한 경로 : 2
성공한 경로 : 3

0. boolean타입의 메서드 매개변수는 x,y
1.(if) x < 0 or y < 0 or x >= N or y >= N 라면 미로의 좌표를 벗어났으므로 false
2.(else if) 좌표 x,y의 위치가 막힌 갈 수 있는 셀 (0)이라면?
    >> false (가고있는 경우가 실패하였을 때 2, 벽인 1인 경우 미로의 경로가 막혔다로 인식)
3.(else if) 만약 출구라면?(x=N-1, y=N-1이라면?) maze[x][y]는 성공한경로 3 (출구가 있다면 현재 3으로 칠해진 경로는 true로 빠져나온다.)
4.(else) 미로의 좌표에 해당되고 현재 좌표가 벽에 해당되지 않으며, 출구의 위치도 아니다. 그렇다면
    현재 위치를 탐색중인 경로 3으로 수정한다.

    (if) 현재 위치의 동서남북인 (x+1,y) (x-1,y) (x,y-1) (x,y+1)의 좌표 중 하나라도 유효 셀인 경우에만
         위의 1~4 조건을 동서남북 좌표 4개를 대입해서 무한히 적용시킨다.
    (else) 현재 위치에서 더는 갈 수 있는 유효한 셀이 없게 된다면 3을 2로 수정한다.


** "현재 위치에서 더는 갈 수 있는 유효한 셀이 없게 된다면 3을 2로 수정한다." 라고 하였는데,
    이 경우에 4(else)(if)의 조건중 하나는 false로 변경된다. 이와 같은 논리가 4방향으로 지속되므로
    다른 3방향의 경우에도 막혀있다면 결국 4(else)(if)는 false가 되며 출구로 가는 경로를 제외하고는
    처음 recursion이 시작된 조건으로 되돌아오게 될 것이다.
    recursion의 특성을 이해해야만 한다.
