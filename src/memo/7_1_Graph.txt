- 그래프

    - 무방향 그래프
        그래프 G = (V,E)
        vertex = {1,2,3,4,} Edge = {(1,2)(1,3)(2,3)....}, n = vertex의 개수, m = Edge의 개수
        개체들 간의 이진관계를 표현

    - 방향 그래프
        G = (V, E)
        edge (u,v)는 u->v로의 방향만을 가짐

    - 가중치 그래프
        edge마다 가중치가 지정

- 그래프의 표현 (무방향그래프일때)

    - 인접 행렬(adjacency matrix)
        N*N행렬(무방향그래프)은 대칭행렬.
        저장공간 N^2, 어떤 노드 v에 인접한 노드찾기 O(n) = v가 들어간 엣지찾기
        어떤 엣지 (u,v)가 존재하는지 검사 O(1) :  (u,v) == 0 or 1

    - 인접 리스트(adjacency list)
        정점(v) 집합을 표현하는 하나의 배열과, 각 정점마다 인접한 정점(v)들의 연결리스트.
        저장공간 : 정점 n개 + 엣지 2m개, O(n+m)
        어떤 노드 v에 인접한 모든 노드 찾기, O(degree(v)), 최악 O(n) // 실제 인접한 노드의 개수만큼의 시간이 걸림 (인접행렬보다 유리함)
        어떤 엣지 (u,v)가 존재하는지 검사, O(degree(u)) << // (3,5)를 찾는다면 3의 연결리스트를 모두 읽어봐야함 (인접행렬보다 불리)

        edge의 개수의 2배가 연결리스트로 저장된다. (2,5) (5,2) 2m **

- 그래프의 표현 (방향그래프일때)
    - 인접행렬은 대각선을 기준으로 대칭이었지만, 방향그래프라면 대각선을 기준으로 한쪽을 삭제해주면 된다.
    - 인접리스트는 어떤 노드에 인접한 노드들을 연결리스트로 저장을 시켰다면 무방향의 경우 엣지의 2배가 저장이 되었지만
        이제는 직관적으로 가르키는 방향의 개수만큼 연결리스트에 저장된다. 2m -> m


- 가중치 그래프의 인접행렬 표현
    에지의 존재를 나타내는 값으로 1 대신 에지의 가중치를 저장.
    특별한 규칙은 없고, 가중치가 의미하는 바에 따라서
        거리를 나타낸다면, 대각선은 0으로, 에지가 없다면 무한대, 에지가 있다면 에지의 가중치를 저장. (거리기준 인접되지않은 경우 거리는 무한대)
        용량을 나타낸다면, 대각선은 무한대로, 에지가 없다면 0, 에지가 있다면 에지의 가중치를 저장.  (용량기준 인접되지않은 링크의 용량이 0)


- 경로와 연결성(무방향그래프일때)
    인접하다. = 직접 연결되어 있다.
    연결되어있다. = 노드와 노드 사이 서로 연결되는 path인 edge들이 존재한다면 (1,2) > (2,3) > (3,5)

    모든 노드들이 '연결되어있을때' 연결된 그래프
    각각 독립된 3개의 '연결된 그래프'가 하나의 그래프라면 >> '3개의 연결요소(connected component)'로 구성된 하나의 그래프



