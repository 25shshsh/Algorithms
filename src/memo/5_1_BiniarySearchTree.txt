- 이진탐색트리의 표현
루트노드의 주소는 따로 보관. (연결리스트)
node에 left, right 주소, key값, 필요하다면 부모노드의 주소
중복값은 없다는 조건.
최악의 경우 O(h=n)

- 이진탐색트리의 순회(traversal) : 모든 노드를 방문.
inorder : 중순위 순회
preorder : 선순위 순회
postorder : 후순위 순회
+ 레벨오더 순회

- 이진탐색트리 Inorder 순회
루트노드 : r
TreeL, TreeR : 왼오 부트리.
** 순서 : TL -> r ->TR
** 왼쪽 >> 오른쪽으로 방문, 부트리에 자식노드가 있다면 자식노드의 리프부터 거슬러서 다시 부트리 그 후 오른쪽 노드 방문 **


- inorder : 왼쪽서브트리 방문순회, 루트노드 프린트, 오른쪽서브트리 방문순회
- preorder : 중앙 왼쪽부트리(중앙,왼,오 순) 오 32분
- postorder : 왼 오(왼,오,중앙) 중앙 >> 순회하면 후위표기식 출력 ㄷㄷ
- 레벨오더 순회 : 레벨 순 방문, 동일레벨에서는 왼쪽 > 오른쪽 방문
    1. 루트노드를 큐에 넣는다.
    2. 루트노드를 큐에서 꺼낸다. 꺼낸 노드의 자식노드들을 방문한다.
    3. 그 자식노드들을 큐에 넣는다. (큐가 빌때까지 while)


    최악 O(n) ~ 최선(log N)


- 이진탐색트리 : 왼쪽자식노드는 부모노드보다 작고, 오른쪽자식노드 부모노드보다 크다.
- 노드 x의 successor : x보다 큰 노드들 중 가장 작은 노드. ( ** 모든 키는 다 다르다는 가정.)??
    >> 노드 x의 오른쪽 서브트리에서 왼쪽노드의 리프노드. or successor보다 작은노드 중 가장 큰 노드 >> 노드x
    1. 오른쪽서브트리가 존재한다면? 오른쪽서브트리로 들어가서 왼쪽리프노드(최솟값)를 찾으면 된다.
    2. (오른쪽서브트리가 없다면), 부모노드가 null이 아니면서(루트노드) and 부모노드의 오른쪽서브트리가 될 때까지 반복하며 타고 올라감.
        >> 루트노드가 successor가 될테고, 부모노드가 null이라면 내가 이 트리에서 최댓값

- 노드 x의 predecessor : x보다 작은 노드들 중 가장 큰 노드. ( 모든 키는 다 다르다는 가정.)
    predecessor의 sucessor는 sucessor의 predecessor이다.

- 이진탐색트리 최솟값(최댓값) 찾기 : O(depth)
왼쪽노드의 자식이 없을때까지 루트노드(부모노드)부터 왼쪽자식노드와 치환
오른쪽노드의 자식이 없을때까지 루트노드(부모노드)부터 오른쪽자식노드와 치환



- search(tree-Successor) 알고리즘, O(height)
    1. x의 오른쪽 서브트리가 NIL이 아니라면? >> 오른쪽서브트리에서 맨 왼쪽 리프노드인 최솟값을 찾으면 된다.
    2. x의 오른쪽 서브트리가 NIL이라면? >> x의 부모를 y라고 명명한다.
        y가 NIL이 아니고, X가 부모의 오른쪽자식일 동안 반복한다. ( y가 NIL이면 x는 루트노드, x가 y의 왼쪽자식노드라면 y가 x의 successor가 된다.)
            기존y자리에 x가 오고,
            parent[y]의 자리에는 y가 온다.
        반복문이 종료되었다면 y를 리턴한다.


- insert(tree, insert해야 할 z) (이진탐색트리에서 기존의 노드들은 변함이없고, 노드 끝에 새로운 노드들이 추가되는 형태이다.), O(height)
    1. x는 루트노드의 주소, y는 NIL을 초기값으로 지정한다.
    2. while (x != NIL) : x가 nil이되면 종료한다.
        y = x (x가 한칸 내려가기전에 먼저 y를 x의 위치로 내린다.
        if(key[z] < key[x]) // x는 내려가면서 z의 크기에 따라 왼쪽, 오른쪽서브트리를 비교하면서 내려간다.
            left[x] = x
        else
            right[x] = x
        while문이 종료된다면, parent[z] = y이다. (y가 z의 부모노드이다.)

        (예외적인 경우)
        if (y = NIL) (y가 NIL이라면 while문은 한번도 실행되지 않았다. 트리 자체가 없다. 1번이라도 실행되었다면 y가 root[t]였을 것)
            root[t] = z ( z를 루트노드로)
        else if (key[z] < key[y]) // z가 y의 자식으로만 분류했지 왼쪽노드인지 오른쪽노드인지는 정하지않았었다.
            left[y] = z
        else if (key[y] < key[z])
            right[y] = z



- delete :
    case1. 지워야 할 노드가 자식노드가 없는 경우, 삭제할 노드를 찾았다면 O(1)
        >> 그냥 삭제.

    case2. 지워야 할 노드가 자식노드가 1개인 경우, 삭제할 노드를 찾았다면 O(1)
        >> 내 자식노드를 내 부모노드와 직접적으로 링크연결 (내 링크대신)

    case3. 지워야 할 노드가 자식노드가 2개인 경우 (successor나 predecessor를 찾으면 된다.), successor를 찾을때 최악O(h)
        >> x의 오른쪽서브트리에서 가장 작은 값이 x의 자리로 와야 '오른쪽서브트리의 모든 값들은 x보다 크다'가 참이다.
            >> (당연히 x의 오른쪽서브트리의 모든 값은 x의 왼쪽서브트리의 어떤 값보다 크다.)
        >> x의 successor를 복사하여 x의 자리로 와야한다.
        >> x의 successor는 x의 오른쪽서브트리에서 가장 작은 값이므로, successor의 왼쪽서브트리는 존재할 수가 없다. **
            >> successor의 자식노드는 0~1개이기 때문에, case1, case2의 방법대로 삭제하면 그만이다. **


delete(Tree, z) // Tree에서 삭제할 노드 z
    if(left[Z] == nil, right[z] == nil) // 삭제할 노드 z의 자식노드가 0 or 1개일때 (case1, 2)
        y = z (y가 case1,2일때 삭제될 것)
    else: // 삭제할 노드 z의 자식노드가 2개라면 (case 3)
        y = Tree-Successor(z) // y는 z의 successor가 된다.

    // case2
    // y가 자식이있다면 x라고 명명.
    if(left[y] != NIL) // 만약 y의 왼쪽자식이 있다면 (y는 자식이 0~1개거나 혹은 successor(z)이다.)
        x = left[y] // case2의 y의 자식을 x라고 한다.
    else if (right[y] != NIL)// 만약 y의 오른쪽자식이 있다면
        x = right[y] // case2의 y의 자식을 x라고 한다.

    // x의 부모를 y에서 y의 부모로 변경
    if(x != NIL) // y의 자식 x가 존재한다면
        parent[x] = parent[y] y의부모가 x의 부모가 된다. (x의 부모 변경, y의부모가 자식을 y->x 로 변경하면 끝.)

    // y의부모의 자식을 y에서 x로교체
    if(parent[y] = NIL) // y가 루트노드라면
        root[Tree] = x // x가 루트노드로
    else if(y == left[parent[y]]) // y의 부모의 왼쪽자식이 y라면
        x == left[parent[y]] // y의 부모의 왼쪽자식을 x로 변경 (y의부모의 자식 변경)
    else if(y == right[parent[y]]) // y의 부모의 오른쪽자식이 y라면
        x == right[parent[y]] // y의 부모의 오른쪽자식을 x로 변경 (y의부모의 자식 변경)

    //case3
    if(y != z) // y와 z가 다르다는 것은, z의 자식노드가 2개이며 y는 z의 successor라는 뜻이다.
        key[z] = key[y]
        y의 부가정보도 z로 모두 옮긴다.
        y가 자식노드가 0,1개일 경우 위의 로직대로 처리한다.

    (* case1의 경우 따로 설명은 없지만 y의부모가 자식을 y에서 x로 교체했을때 완료이다.)


- RBT에서 Delete 연산 실행 후 실제 삭제 노드 y가 red였다면 종료,
    삭제된 y가 black이었다면 RB-DELETE-FIXUP(T,x)을 호출한다.

- RB-DELETE-FIXUP(T,x) // y는 successor로 삭제(case3) x는 y의 유일한자식노드이다.
    규칙2. 삭제된 y가 루트노드였고 y의 유일한자식 x가 red라면, 루트노드가 red가 되므로 위반. (마지막에 color[root[t]] = black으로 바꿔주면 그만)
    규칙4. p[y]와 x가 모두 red라면 위반 >> x를 블랙으로 바꿔주면 끝 ( p[y]까지는 규칙이 보장되어있음)
    규칙5. 삭제된 y가 black이니 y를 통했던 경로만 bh가 1 모자르다. (실제 해결해야할 문제)
        x가 red였다면 black으로 바꿔주면 된다.
        그러나 x가 원래 black이었다면? 인위적으로 black을 2개를 주자. (억지)
            이 double black node x를 어떻게 되돌릴 것인가?

    black 1개를 억지로 부모노드로 계속 올려보낼 것이다.
    받은 부모노드가 red라서 red&black이 되었다면 black노드로 변경시키고 종료.
    루트노드가 doubleblack이라면 extrablack 제거 후 종료. (??왜)

    x가 루트노드가 아니고 doubleBlack일때, x는 루트노드가 아니기때문에 형제노드 w가 존재하고
    형제노드w는 nil노드가 아니다. (x가 bh=2인데 w는 bh=1이면 안되니까)











