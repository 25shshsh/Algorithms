- 레드블랙트리
    Binary-Search-tree의 일종.
    균형이 잡힌 트리이다. O(logn), 이진검색트리의 균형이 극단적으로 무너지지않도록 수정된 트리이다.
    Search, Insert, Delete 연산을 최악의 경우에도 O(h=n)이 아닌 logn에 지원.

- 노드 저장정보
    루트노드의 주소는 따로 보관. (연결리스트)
    node에 left, right 주소, key값, 필요하다면 부모노드의 주소
    중복값은 없다는 조건.

- 레드블랙트리의 특징
    각 노드는  하나의 , 왼쪽 자식노드, 오른쪽 자식노드, 부모노드(선택)의 주소 저장한다.
    자식노드가 없다면? >> 리프노드는 양쪽자식으로 NIL노드를 가지고있다고 가정
    루트노드의 부모도 NIL노드라고 가정
    그렇다면 실제데이터를 가지고 있는 인터널노드 그리고 리프노드는 전부 NIL노드가 되겠다.

- 레드블랙트리의 성립조건 : 만족하면 높이는 log2N이다.
    1. 루트노드는 black이다.
    2. 모든 리프노드(NIL노드)는 black이다.
    3. 각 노드는 red, black로 구성되어야한다..
    4. red노드의 자식노드들은 전부black이다. (red는 연속되서 나오지 않는다.)
    5. 모든 노드에 대해서, 한 노드에서 리프노드에 이를때까지 동일한 갯수의 black노드가 있다.

- 레드블랙트리의 높이 (규칙)
    노드 x의 높이 h(x)는  '자신으로부터 리프노드까지 [가장 긴 경로]에 포함된 엣지'이다. ex) 1-2-3, 1부터 3까지 엣지는 2개
    노드 x의 블랙-높이 bh(x)는 x로부터 리프노드까지의 경로상의 블랙노드의 수이다. (노드x를 제외하고)
    높이가 h인 노드의 블랙-높이는 bh>=h/2이다.
        red노드의 자식은 모두 black이기에, red노드는 연속되서 나올 수 없다. ( 0 <= 레드노드 <= h/2)
    노드x를 루트노드로하는 임의의 부트리는 적어도 2^bh(x)-1개의 내부노드(NIL노드를제외한)를 포함한다.
        bh(x)가 1,2,3이라면, 1,3,7개의 최소한의 내부노드를 포함한다.
        bh(x)가 1이라면 블
        bh(x)가 2라면 블-블-레 (블-레 둘다 nil노드를 갖는다.)

- Search
    이진검색트리와 이하 동일하다.

- Left and Right Rotation O(1): 레드블랙트리의 insert와 delete 알고리즘이 공통적으로 필요로 하는 기본연산
O(1)이며, 수행하더라도 이진검색트리의 특성을 유지한다.
    x<y일때, x의 왼쪽 서브트리는 그대로, y 오른쪽 서브트리도 그대로, 하지만 rotation이 될 때
    x의 오른쪽서브트리는 y의 왼쪽서브트리로, y의 왼쪽서브트리는 x의 오른쪽서브트리로 이동한다.
    (x는 y의 왼쪽서브트리, y는 x의 오른쪽서브트리이다.)

- leftRoation(Tree, x) O(1) // ((x가 중앙에서 왼쪽서브트리로 옮겨질꺼라서 left인가봐?))
    각 노드마다 left,right,parent(선택),key값이 저장된다. (중복없음)
    서로서로 가르키는 링크를 그려보면서 놓치는게 없는지 체크하자.

    y = right[x], y != NIL ( y는 x의 오른쪽서브트리이고 NIL이 아니다. 가정)
    parent[root[T]] = NTL ( 루트노드의 부모를 NIL로 가정)


    y = right[x] // x의 오른쪽자식노드는 y이다. (y의 링크를 끊어도 정보를 찾을수있게 y에 저장.)

    right[x] = left[y] // y의 왼쪽서브트리 b를, x의 오른쪽서브트리로 엣지를 변경한다. >> (x의 오른쪽서브트리 y와는 링크가 끊어짐)
    p[left[y]] = x // y의 왼쪽서브트리 b의 부모도 x로 변경한다. (선택사항, b가 가르키는 부모주소도 x로 변경)

    p[y] = p[x] // x와 y는 같은부모를 갖는다. (x의 부모값 변경 필요)

    if p[x] == nil[T] // x의 부모가 없다면 y는 루트노드하면되고. (어떻게보면 중앙)
        root[T] = y
    else if (x = left[parent[x]]) // x의 부모의 왼쪽서브트리 x라면 y가 x대신 x 부모의 왼쪽서브트리하자 (왼쪽)
        left[parent[x] = y
    else if (x = right[parent[x]]) // x의 부모의 오른쪽서브트리 x라면 y가 x대신 x 부모의 오른쪽서브트리하자 (오른쪽)
            right[parent[x] = y

    left[y] = x // x는 y의 왼쪽서브트리이다.
    p[x] = y // x의 부모를 y로 변경 (아까까지는 부모가 같았음)

    ** 부모노드의 주소값까지 생각해야하니까 left인지 right인지랑 추가로 parent도 지정해줘야한다. (위 코드에서는 링크가 2개라는 말임) **


- R-B-Insert(Tree, intert 할 z)
    * 이진탐색트리의 insert연산과 동일하게 z를 intert한다.
    * 새로운 노드z를 무조건 red노드로 한다.
    * RB-INSERT-FIXUP을 호출한다.

        1. x는 루트노드의 주소, y는 NIL을 초기값으로 지정한다.
        2. while (x != NIL) : x가 nil이되면 종료한다.
            y = x (x가 한칸 내려가기전에 먼저 y를 x의 위치로 내린다.
            if(key[z] < key[x]) // x는 내려가면서 z의 크기에 따라 왼쪽, 오른쪽서브트리를 비교하면서 내려간다.
                left[x] = x
            else
                right[x] = x
            while문이 종료된다면, parent[z] = y이다. (y가 z의 부모노드이다.)

            (예외적인 경우)
            if (y = NIL) (y가 NIL이라면 while문은 한번도 실행되지 않았다. 트리 자체가 없다. 1번이라도 실행되었다면 y가 root[t]였을 것)
                root[t] = z ( z를 루트노드로)
            else if (key[z] < key[y]) // z가 y의 자식으로만 분류했지 왼쪽노드인지 오른쪽노드인지는 정하지않았었다.
                left[y] = z
            else if (key[y] < key[z])
                right[y] = z

            // 여기까지는 BST의 Insert와 동일하다.
          * color[z] = RED // 새로 insert된 노드를 무작정 레드노드로 바꾼다. RBT의 R-R규칙을 어길 가능성이 있다.
          * RB-INSERT-FIXUP(T,z) // RB-INSERT-FIXUP을 호출한다

    - 규칙위반가능성.
        리프노드로 insert된 z가 루트노드라면 위반, root[T]를 블랙으로 바꾸면 그만이다. (언제든 간단히 해결가능)
        z의 부모가 parent[z]가 red라면 위반, (R-R위반, 5번조건때문에 까다롭다.)

    - RB-INSERT-FIXUP(T,z) 12-2 42분경
        while(p[z] != null && color[p[z]] == red) // z의 부모가 존재하고 컬러가 red일때 반복
            if(p2의 왼쪽자식이 p일때) // case 1,2,3일때
                p2의 오른쪽자식을 y라고 한다.(z의 삼촌노드가 y)
                if(y의 컬러가 red라면) // case1의 경우
                    color[p[z]] = black
                    color[y] = black
                    color[p[p[z]]] = red
                    z = p[p[z]] // p[p[z]]가 red인데 p[p[z]]의 부모가 red라면 아까 위 알고리즘 반복, 최악의 경우 루트노드(black)까지 반복

                else if(z가 p의 오른쪽자식의 경우라면? ) // 명시하지않아도 y의 컬러가 블랙은 포함
                    z = p[z] //p를 기준으로 left-Rotation
                    leftRotation(T,z) // case2를 3로 만들었다.

                    // case3
                    rightRotation(T,p[p[z])
                    color[p[z]] = black
                    color[p[p[z]]] = red


            else() // case 4,5,6일때 (p2의 자식 p가 왼쪽자식이 아닌 오른쪽자식인 경우) 위의 로직에 방향만 바꿔서 반복

        color[root[t]] = black
        // case1에서 color[p[p[z]]] = red 가 루트노드를 red로 건들었을 수도 있으니까 (루트노드는 부모가 없기 때문에 red로 바뀌고 종료되었을 수도)
























- n개의 내부노드를 가는 레드블랙트리의 높이는 2log2(N+1) 이하이다. ( 증명좀)
    https://ferrante.tistory.com/46

    2logN+1이든 뭐든 상수는 빠지고 O(logN)이다.
    레드블랙트리에서 search insert delete 등 연산은 log2N의 시간복잡도를 갖는다.

- Rotate :













