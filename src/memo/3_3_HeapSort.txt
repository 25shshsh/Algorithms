- 힙정렬 : 최악일 때 nlogn
** n개의 원소를 heap으로 만들려면 log2N (이진트리니까) + heap으로 만드는 heapify를 n번해줘야한다. >> n log n

5 10 11 =  i 2i 2i+1 // 4 9 10 = i 2i+1 2i+2


- MAX_HEAPIFY (A[], i )
    1. 자식이 없다면 종료 (2j)
    2. 부모i와 (자식노드중 큰 쪽인 k)와 비교시
        2-1 부모가 크다면 종료.
        2-2 자식이 크다면 A[i] <--> A[k]
    3-1. MAX_HEAPIFY(A, k) 반복(자식이 존재하지 않거나, 부모가 자식보다 클 때까지 반복)
    3-2. or A[i]가 자식노드가 있을 때까지만 반복조건

- MAX HEAPIFY의 전제조건으로는 최소 complete binary tree 일 때이다. >> complete binary tree부터 배열로 표현이 가능하기 때문이다.
    complete binary tree 보통 full binary tree와 같이 logN의 복잡도로 생각하면 된다.



- HeapSort : 힙을 이용해서 정렬을 하기 위해서는 먼저 힙을 만들어야한다. (시작)
    1. complete binary tree를 먼저 전체가 heap이 되도록 MAX HIFIFY.
    너비우선탐색을 역방향으로 시작(리프노드부터 루트까지) 리프노드가 아닌 첫번째 노드를 target으로 max-hifify를 반복적으로 한다.
    2. 노드가 11개라면 2/11 = 5 5번노드가 리프노드가 아닌 첫번째 노드이다. i가 target이 되려면 2i도 존재하여야한다.

- 힙에서 최대값(루트)와 가장마지막 값을 바꾼다. >> 루트노드는 힙에서 가장 큰 값이므로 배열의 끝으로 옮긴다.
  힙의 크기는 1 줄어들었다고 가정한다.
  또 다시 루트노드에 대해서 HEAPIFY()를 한다. (끝)




